module part1 (KEY, SW, LEDR, HEX3, HEX2, HEX1, HEX0);
	input [1:0] KEY;
	input [9:0] SW;

	output [9:0] LEDR;
	output [0:6] HEX3, HEX2, HEX1, HEX0;


	wire Clock, Resetn;
	wire [7:0] A, A_reg;  // A => value to input it from SW | A-reg => After a Register the value (save it into a reg)
	wire [7:0] S, S_reg;  // S => Sum
	wire overflow, overflow_reg; 
	wire carry, carry_reg;
	// Every Thing I Have To Save It Into A Reg
	// [7:0] ==> 8-bit



	// Read From
	assign Clock = KEY[0];
	assign Resetn = KEY[1];
	assign A = SW; // Read From SW 



// 1] Save (A) Value Into Reg

	// Create An Instance 
	// Use (regn) Module
	// A -> Value I Needed To Save
	// A_reg -> The place to save A value 
	regn U_A (A, Clock, Resetn, A_reg); 





// 2] Do Addition Assign:
// a) take value from A_reg \A\
// b) take value from S_reg == 0 "Untill Now"
// c) Sum A_reg + S_reg
// d) save the result in (S) & (carry)
// we generate the carry from addition
	assign {carry, S} = A_reg + S_reg;




	// To Calc Overflow
	// If A_reg sign == S_reg sign  (both sign is the same)   ==> 1
	// and result  (both sign is the same) ==> 1
	// then overflow == 1
	assign overflow = (A_reg[7] ~^ S_reg[7]) & (A_reg[7] ^ S[7]); 
// ~^ ==> XNOR Gate
// ^ ==> XOR


// 3] Save (S) Value Into Reg
	regn U_S (S, Clock, Resetn, S_reg);  // Take S Value and Save it into a S_reg



// 4] Save (carry) Value Into Reg
// regn is 8-bit & carry is only 1-bit  ==> problem
	regn U_carry (carry, Clock, Resetn, carry_reg);
	// But carry is only 1-bit so... ==> ues defparam
	defparam U_carry.n = 1;



// 5] Save (overflow) Value Into Reg
	regn U_overflow (overflow, Clock, Resetn, overflow_reg);
	defparam U_overflow.n = 1;



	
// 6] Assign The Value in the LED 
	assign LEDR[7:0] = S_reg;  // 8-bit
	assign LEDR[9] = overflow_reg;
	assign LEDR[8] = carry_reg;





// 7] Display The Value in the 7-seg 
// Use hex7seg Module
	// drive the display through 7-seg decoders
	hex7seg digit_3 (A_reg[7:4], HEX3);
	hex7seg digit_2 (A_reg[3:0], HEX2);
	hex7seg digit_1 (S_reg[7:4], HEX1);
	hex7seg digit_0 (S_reg[3:0], HEX0);
endmodule


// Reg Module
// R => Input	
// used for Generate Reg-sum Reg-overflow Reg-carry		
module regn (R, Clock, Resetn, Q);
	parameter n = 8;
	
	input [n-1:0] R;
	input Clock, Resetn;
	output [n-1:0] Q;  // Save Value (Reg value) it will not change untell the next clock

	reg [n-1:0] Q; // Reg Value [it will not chage until the next clock]

	// Synchronous  -- @ => listens any change on Clock
	always @(posedge Clock or negedge Resetn)
		if(!Resetn) // if Reset
			Q <= 'b0; // Reset value to 0
		else // not Reset ==> posetive edge of a clock
			Q <= R;  // Take the value from R and Save it in Q-Reg value
endmodule


// BCD Code
module hex7seg (hex, display);
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input [3:0] hex;
	output reg [0:6] display;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	/*
	 *       0  
	 *      ---  
	 *     |   |
	 *    5|   |1
	 *     | 6 |
	 *      ---  
	 *     |   |
	 *    4|   |2
	 *     |   |
	 *      ---  
	 *       3  
	 */
	always @ (hex)
		case (hex)
			4'h0: display = 7'b0000001;
			4'h1: display = 7'b1001111;
			4'h2: display = 7'b0010010;
			4'h3: display = 7'b0000110;
			4'h4: display = 7'b1001100;
			4'h5: display = 7'b0100100;
			4'h6: display = 7'b0100000;
			4'h7: display = 7'b0001111;
			4'h8: display = 7'b0000000;
			4'h9: display = 7'b0000100;
			4'hA: display = 7'b0001000;
			4'hB: display = 7'b1100000;
			4'hC: display = 7'b0110001;
			4'hD: display = 7'b1000010;
			4'hE: display = 7'b0110000;
			4'hF: display = 7'b0111000;
			//default: display = 7'b1111111;
		endcase
endmodule
