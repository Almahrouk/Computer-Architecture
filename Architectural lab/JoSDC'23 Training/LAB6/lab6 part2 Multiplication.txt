// 1] Add
// 2] Shift
// 3] Add with carry

// 4-bit * 4-bit => may 7-bit

// Use Full Adder (12 Full Adder)


// Implements an unsigned multiplier P = A x B.
// Inputs: SW[11-8] = A, SW[3-0] = B.
// Outputs: HEX[5-4] shows the product P, HEX-2 -> A,  HEX-0 -> B


module part3 (SW, HEX5, HEX4, HEX2, HEX0);
	
	input [7:0] SW;
	output [0:6] HEX5, HEX4, HEX2, HEX0;


	wire [3:0] A, B; // 4-bit for each
	wire [7:0] P;  // 8-bit

	// 3-bit
	// To Save The carry from each addition  -> to use it in next level
	wire [3:1] C_b1; // carries for row that ANDs with B1
	wire [3:1] C_b2; // carries for row that ANDs with B2
	wire [3:1] C_b3; // carries for row that ANDs with B3

	// 4-bit
	// temporary product keept tract off -> to make it add in next level
	// to save the result temporary
	// each level need on 
	// 8 level => use PP1, PP2, PP3, PP4, PP5, PP6, PP7, PP8
	wire [5:2] PP1; // partial products from row that ANDs with B1
	wire [5:2] PP2; // partial products from row that ANDs with B2




	assign A = SW[7:4];
	assign B = SW[3:0];
	
	assign P[0] = A[0] & B[0];


// fa => Full Adder Module
	// module fa (a, b, ci, s, co);
	fa b1_a0 (A[1] & B[0],  A[0] & B[1],  1'b0,    P[1],   c_b1[1]);
	fa b1_a1 (A[2] & B[0],  A[1] & B[1],  c_b1[1], PP1[2], c_b1[2]);
	fa b1_a2 (A[3] & B[0],  A[2] & B[1],  c_b1[2], PP1[3], c_b1[3]);
	fa b1_a3 (1'b0,         A[3] & B[1],  c_b1[3], PP1[4], PP1[5]);




	fa b2_a0 (PP1[2], A[0] & B[2],  1'b0,    P[2],   c_b2[1]);
	fa b2_a1 (PP1[3], A[1] & B[2],  c_b2[1], PP2[3], c_b2[2]);
	fa b2_a2 (PP1[4], A[2] & B[2],  c_b2[2], PP2[4], c_b2[3]);
	fa b2_a3 (PP1[5], A[3] & B[2],  c_b2[3], PP2[5], PP2[6]);



	fa b3_a0 (PP2[3], A[0] & B[3],  1'b0,    P[3], c_b3[1]);
	fa b3_a1 (PP2[4], A[1] & B[3],  c_b3[1], P[4], c_b3[2]);
	fa b3_a2 (PP2[5], A[2] & B[3],  c_b3[2], P[5], c_b3[3]);
	fa b3_a3 (PP2[6], A[3] & B[3],  c_b3[3], P[6], P[7]);


	// Drive the Display through a 7-seg decodres
	hex7seg digit_5 (P[7:4], HEX5);
	hex7seg digit_4 (P[3:0], HEX4);
	hex7seg digit_3 (A, HEX2);
	hex7seg digit_2 (B, HEX0);

endmodule




module fa (a, b, ci, s, co);
	input a, b, ci;
	output s, co;

	wire a_xor_b;

	assign a_xor_b = a ^ b;
	assign s = a_xor_b ^ ci;
	assign co = (~a_xor_b & b) | (a_xor_b & ci);

endmodule






// BCD Code
module hex7seg (hex, display);
	/******************************************************************/
	/****      PORT DECLARATIONS                                   ****/
	/******************************************************************/
	input [3:0] hex;
	output reg [0:6] display;
	
	/******************************************************************/
	/****      IMPLEMENTATION                                      ****/
	/******************************************************************/
	/*
	 *       0  
	 *      ---  
	 *     |   |
	 *    5|   |1
	 *     | 6 |
	 *      ---  
	 *     |   |
	 *    4|   |2
	 *     |   |
	 *      ---  
	 *       3  
	 */
	always @ (hex)
		case (hex)
			4'h0: display = 7'b0000001;
			4'h1: display = 7'b1001111;
			4'h2: display = 7'b0010010;
			4'h3: display = 7'b0000110;
			4'h4: display = 7'b1001100;
			4'h5: display = 7'b0100100;
			4'h6: display = 7'b0100000;
			4'h7: display = 7'b0001111;
			4'h8: display = 7'b0000000;
			4'h9: display = 7'b0000100;
			4'hA: display = 7'b0001000;
			4'hB: display = 7'b1100000;
			4'hC: display = 7'b0110001;
			4'hD: display = 7'b1000010;
			4'hE: display = 7'b0110000;
			4'hF: display = 7'b0111000;
			//default: display = 7'b1111111;
		endcase
endmodule



























