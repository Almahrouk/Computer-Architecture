// clk pirude = T = 1/50MHz => 20ns
// 1sec/20ns => 50 000 000
// find no. of bit for larg counter 

// uses a 1-digit bcd counter enable at 1Hz

module part3 (Clock_50, HEX0);
	input Clock_50;
	output [0:6] HEX0;


	wire [3:0] bcd;
	reg [24:0] slow_count; // 1st Counter 25 bits -> flasing every 1sec
	reg [3:0] digit_flipper; // 2nd Counter 4-bit -> flasing from 0 to 9 then set to 0 and reppiting procces


	// Create a 1Hz 4-bit counter

	// Implemention The 2 Counter 
	// A large counter to produce a secound (approx) enable from the 50MHz Clock
	always @(poseedge Clock_50)
		slow_count <= slow_count + 1'b1; // Moudulce Counter 

	// 4-bit counter that uses a slow enable for selecting digit
	always @(poseedge Clock_50)
		if(slow_count == 0)
			if(digit_flipper == 4'h9)
			// Use (<) => Non-blocking
				digit_flipper <= 4'h0; // Flip Back To Zero
			else
				digit_flipper <= digit_flipper + 1;


	assign bcd = digit_flipper;
	// drive the display through a 7-seg decoder
	bcd7seg digit_0 (bcd, HEX0);

endmodule





	